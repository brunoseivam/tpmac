CLOSE

;###############################################################################
; Define encoder loss protection
; Original Author: Alan Greer
; Used variables: P364..396 (borrowed from PLC3),P400..497,mxx84 defined
; Macros (and example values): 
; ONM1 = 1       ;Turn encoder loss protection for axis 1 on
; ...
; ONM32 = 0      ;Turn encoder loss protection for axis 1 off
; CSM1 = 0       ;CS number that M1 is in (0 for none)
; ...
; CSM32 = 4      ;CS number that M32 is in (0 for none)
;---------------------------------------------------------; 
; The following must be uncommented in your main pmc file ;
;---------------------------------------------------------;
;;Memory locations for encoder loss bit
;;These addresses work for micromech racks, OD racks need different ones
;ms0,i21 = $6488C8DCC0A1
;ms0,i22 = $6488C9DCC0A2
;ms0,i23 = $6488CADCC0A3
;ms0,i24 = $6488CBDCC0A5
;ms0,i25 = $6488CCDCC0A6
;ms0,i26 = $6488CDDCC0A7
;ms0,i27 = $6488CEDCC0A9
;ms0,i28 = $6488CFDCC0AA
;ms0,i29 = $6498C8DCC0AB
;ms0,i30 = $6498C9DCC0AD
;ms0,i31 = $6498CADCC0AE
;ms0,i32 = $6498CBDCC0AF
;ms0,i33 = $6498CCDCC0B1
;ms0,i34 = $6498CDDCC0B2
;ms0,i35 = $6498CEDCC0B3
;ms0,i36 = $6498CFDCC0B5
;ms32,i21 = $6488C8DCC0A1
;ms32,i22 = $6488C9DCC0A2
;ms32,i23 = $6488CADCC0A3
;ms32,i24 = $6488CBDCC0A5
;ms32,i25 = $6488CCDCC0A6
;ms32,i26 = $6488CDDCC0A7
;ms32,i27 = $6488CEDCC0A9
;ms32,i28 = $6488CFDCC0AA
;ms32,i29 = $6498C8DCC0AB
;ms32,i30 = $6498C9DCC0AD
;ms32,i31 = $6498CADCC0AE
;ms32,i32 = $6498CBDCC0AF
;ms32,i33 = $6498CCDCC0B1
;ms32,i34 = $6498CDDCC0B2
;ms32,i35 = $6498CEDCC0B3
;ms32,i36 = $6498CFDCC0B5
;;Configure MACRO station node enable i variables
;ms0,i996 = $FBFFF
;ms32,i996 = $2FBFFF
;;Configure IO
;ms0,i975 = $CC
;ms32,i975 = $CC
;;Macro IC0 and IC2 Node Activate Control
;i6841 = $FFFFF
;i6941 = $2FFFFF
;###############################################################################

; Turn encoder loss protection on or off
P401 = $(ONM1)
P402 = $(ONM2)
P403 = $(ONM3)
P404 = $(ONM4)
P405 = $(ONM5)
P406 = $(ONM6)
P407 = $(ONM7)
P408 = $(ONM8)
P409 = $(ONM9)
P410 = $(ONM10)
P411 = $(ONM11)
P412 = $(ONM12)
P413 = $(ONM13)
P414 = $(ONM14)
P415 = $(ONM15)
P416 = $(ONM16)
P417 = $(ONM17)
P418 = $(ONM18)
P419 = $(ONM19)
P420 = $(ONM20)
P421 = $(ONM21)
P422 = $(ONM22)
P423 = $(ONM23)
P424 = $(ONM24)
P425 = $(ONM25)
P426 = $(ONM26)
P427 = $(ONM27)
P428 = $(ONM28)
P429 = $(ONM29)
P430 = $(ONM30)
P431 = $(ONM31)
P432 = $(ONM32)

; Associate motor with CS
P433 = $(CSM1)
P434 = $(CSM2)
P435 = $(CSM3)
P436 = $(CSM4)
P437 = $(CSM5)
P438 = $(CSM6)
P439 = $(CSM7)
P440 = $(CSM8)
P441 = $(CSM9)
P442 = $(CSM10)
P443 = $(CSM11)
P444 = $(CSM12)
P445 = $(CSM13)
P446 = $(CSM14)
P447 = $(CSM15)
P448 = $(CSM16)
P449 = $(CSM17)
P450 = $(CSM18)
P451 = $(CSM19)
P452 = $(CSM20)
P453 = $(CSM21)
P454 = $(CSM22)
P455 = $(CSM23)
P456 = $(CSM24)
P457 = $(CSM25)
P458 = $(CSM26)
P459 = $(CSM27)
P460 = $(CSM28)
P461 = $(CSM29)
P462 = $(CSM30)
P463 = $(CSM31)
P464 = $(CSM32)

#define axis_number              P400
; use axis_number to calculate the P variable to look in to see
; if encoder loss protection is turned on on this axis
#define encoder_detection        P(P400 + 400)
; See which axis this motor is in
#define coord_system_number      P(P400 + 432)
; m variable pointing at the memory location showing if the encoder is present
#define encoder_loss_bit         M(P400*100 + 84)
; this is the flag that is set if encoder is lost
; needs to be reset by EPICS when encoder is restored
#define encoder_lost_flag        P(P400+464)
; this is the old following error limit, reset it on initialise
P465..496=0
#define saved_fe_limit           P(P400+364)
; this is the actual following error limit
#define following_error_limit    I(P400*100 + 11)
; define some kill commands
#define abort_coordinate_move    &COMMAND"A"
#define kill_axis                &COMMAND"K"

; i20 sets up 16-bit data transfer lines between
; expansion cards and UMAC macro card.
ms0,i20=$FFF
ms32,i20=$FFF

; i19 controls how often they are read
ms0,i19=$4
ms32,i19=$4

; Set up the M-variable definitions to point to
; the encoder loss memory locations
m184->X:$78421,13
m284->X:$78422,13
m384->X:$78423,13
m484->X:$78425,13
m584->X:$78426,13
m684->X:$78427,13
m784->X:$78429,13
m884->X:$7842A,13
m984->X:$7842B,13
m1084->X:$7842D,13
m1184->X:$7842E,13
m1284->X:$7842F,13
m1384->X:$78431,13
m1484->X:$78432,13
m1584->X:$78433,13
m1684->X:$78435,13
m1784->X:$7A421,13
m1884->X:$7A422,13
m1984->X:$7A423,13
m2084->X:$7A425,13
m2184->X:$7A426,13
m2284->X:$7A427,13
m2384->X:$7A429,13
m2484->X:$7A42A,13
m2584->X:$7A42B,13
m2684->X:$7A42D,13
m2784->X:$7A42E,13
m2884->X:$7A42F,13
m2984->X:$7A431,13
m3084->X:$7A432,13
m3184->X:$7A433,13
m3284->X:$7A435,13

;**********************************************************
;
; Encoder loss detection PLC.  This checks if the encoder
; is lost for each axis.  If it is, it kills the axis,
; sets the following error to 1/16th of a count and aborts
; any coordinate system move that this axis belongs to.
;
; If the encoder is recovered and the latch reset (P(364+axis_number)=0)
; then the following error will be set back to its orginal
; value
;
;**********************************************************
OPEN PLC 4
CLEAR

axis_number = 1
; Loop through all axis
WHILE(axis_number < 33)
        ; Is encoder loss turned on for this axis
        IF(encoder_detection = 1)
                ; Encoder loss is on so check
                ; 1) If the loss bit is set to zero
                ; 2) If the lost flag is set to zero
                IF(encoder_loss_bit=0 AND encoder_lost_flag=0)
                        ; Encoder loss detected
                        ; If the following error limit is sensible
                        ; then save it for future reference
                        IF(following_error_limit != 1)
                                saved_fe_limit = following_error_limit
                        ENDIF
                        ; Set the lost flag true
                        encoder_lost_flag=1
                        ; Check to see if there is a coordinate system
                        ; for this axis that needs aborting
                        IF(coord_system_number > 0)
                                ; Abort any coordinate system motion
                                P497 = coord_system_number
                                ADDRESS&P497
                                abort_coordinate_move
                        ENDIF
                        ; Kill the specific axis
                        ADDRESS#axis_number
                        kill_axis
                ENDIF
        ENDIF

        ; Check if the encoder lost flag is set
        IF(encoder_lost_flag = 1)
                ; Encoder has been lost so set the following
                ; error for this axis to 1/16th count
                following_error_limit = 1
        ENDIF

		IF(encoder_lost_flag = 0 AND following_error_limit = 1)
				IF(saved_fe_limit > 1)
						following_error_limit = saved_fe_limit
				ENDIF
		ENDIF

        axis_number=axis_number+1
ENDWHILE

CLOSE

;Enable background PLCs
i5=2

ENABLE PLC4
